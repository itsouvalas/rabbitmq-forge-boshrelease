---
meta:
  size: default
  disk_config: {}
  instances: 3
  default:
    azs: [z1,z2]
  username: (( vault $CREDENTIALS "/rabbitmq/system:username" ))
  password: (( vault $CREDENTIALS "/rabbitmq/system:password" ))
  username-monitoring: (( vault $CREDENTIALS "/rabbitmq/monitoring:username" ))
  password-monitoring: (( vault $CREDENTIALS "/rabbitmq/monitoring:password" ))
  username-app: (( vault $CREDENTIALS "/rabbitmq/app:username" ))
  password-app: (( vault $CREDENTIALS "/rabbitmq/app:password" ))
  environment: <%= p('environment') %>
  bosh_env: <%= p('bosh_env') %>

<% if p("rabbitmq.autoscale.enabled") -%>
  cf:
    exodus_path: <%= p('cf.exodus_path') %>
    deployment_name: <%= p('cf.deployment_name') %>
    system_domain: <%= p('cf.system_domain') %>
    api_url:    <%= p('cf.api_url') %>
    username:   <%= p('cf.username') %>
    password:   <%= p('cf.password') %>

  mgmt_ssl:    <%= p('rabbitmq_metrics_emitter.rmq_management.skip_ssl_validation') %>
  mgmt_port:   <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_port') %>
  mgmt_scheme: <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_scheme') %>
  mgmt_host:   <%= p('rabbitmq_metrics_emitter.rmq_management.mgmt_host') %>
<% end -%>


<% if p("rabbitmq.autoscale.enabled") || p("rabbitmq.tls.enabled") -%>
variables:
<% end -%>

<% if p("rabbitmq.autoscale.enabled") -%>
- name: rabbitmq_metrics_emitter_crt
  type: certificate
  options:
    ca: (( concat "/" meta.bosh_env "-bosh/" meta.environment "-blacksmith/blacksmith_services_ca" ))
    common_name: (( concat meta.environment "-rabbitmq-metrics-emitter.bosh" ))
  consumes:
    common_name:
      from: rabbitmq-emitter
    alternative_name: 
      from: rabbitmq-emitter
      properties: { wildcard: true }
<% end -%>

<% if p("rabbitmq.tls.enabled") -%>
- name: rabbitmq_cluster_crt
  type: certificate
  options:
    ca: (( concat "/" meta.bosh_env "-bosh/" meta.environment "-blacksmith/blacksmith_services_ca" ))
    common_name: (( concat meta.environment "-rabbitmq-cluster.bosh" ))
  consumes:
    alternative_name: 
      from: rabbitmq-san 
      properties: { wildcard: true }
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") -%>
params:
  cf:
    core_network: <%= p("cf.core_network") %>
<% end -%>

features:
  use_dns_addresses: true

releases:
  - { name: rabbitmq-forge, version: latest }
<% if p("rabbitmq.route_registrar.enabled") %>
  - { name: routing, version: latest }
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") || p("rabbitmq.autoscale.enabled") %>
  - name: bpm
    version: 1.1.12
    url: https://bosh.io/d/github.com/cloudfoundry/bpm-release?v=1.1.12
    sha1: 502e9446fa34accaf122ad2b28b6ffa543d5bbca
  - { name: bosh-dns-aliases, version: latest}
<% end -%>

<% if p("rabbitmq.autoscale.enabled") -%>
  - name: loggregator-agent
    version: 6.3.3
    url: https://bosh.io/d/github.com/cloudfoundry/loggregator-agent-release?v=6.3.3
    sha1: e8386f41e967cc609a3e9a1d6ecf674c3c903fb3
  
  - name: rabbitmq-metrics-emitter
    version: 0.4.1
    url:     https://github.com/starkandwayne/rabbitmq-metrics-emitter-release/releases/download/v0.4.1/rabbitmq-metrics-emitter-0.4.1.tgz
    sha1:    05afc6f3559f45e0696c6a3760242045640e0df8
<% end -%>

stemcells:
- alias: default
  os: ubuntu-bionic
  version: latest

update:
  canaries: 1
  max_in_flight: 10
  canary_watch_time: 1000-30000
  update_watch_time: 1000-30000

instance_groups:
- name: node
  instances: (( grab meta.instances ))
  azs: (( grab meta.azs || meta.default.azs ))
  networks: [name: (( grab meta.net || 'rabbitmq-service' ))]
  stemcell: default

  vm_type: (( grab meta.size ))

  # This is a workaround to make sure only one of `persistent_disk`
  # and `persistent_disk_type` is defined.
  .: (( inject meta.disk_config ))

  jobs:
  - name:    rabbitmq
    release: rabbitmq-forge
    properties:
      rabbitmq:
        plan: cluster
        vhost: (( grab meta.params.instance_id || "/" ))
        network: (( grab meta.net || "rabbitmq-service" ))
        admin:
          user: (( grab meta.username ))
          pass: (( grab meta.password ))
        monitoring:
          user: (( grab meta.username-monitoring ))
          pass: (( grab meta.password-monitoring ))
        app:
          user: (( grab meta.username-app ))
          pass: (( grab meta.password-app ))
        tls:
          enabled: (( grab meta.rabbitmq.tls.enabled || false ))
          dual-mode: (( grab meta.rabbitmq.tls.dual-mode || false ))
<% if p("rabbitmq.tls.enabled") -%>
          ca: (( file "/var/vcap/jobs/blacksmith/config/tls/blacksmith_services_ca" ))
          crt: ((rabbitmq_cluster_crt.certificate))
          key: ((rabbitmq_cluster_crt.private_key))
<% end -%>

    provides:
      rabbitmq-servers:
        as: rabbitmq-servers
        ip_addresses: false
      rabbitmq-san:
        as: rabbitmq-san
        ip_addresses: false
      rabbitmq-alias-domain:
        aliases:
        - domain: "_.rabbitmq_cluster.bosh"
          placeholder_type: uuid
    consumes:
      rabbitmq-servers:
        from: rabbitmq-servers
        ip_addresses: false
    custom_provider_definitions:
    - name: rabbitmq-san
      type: address
    - name: rabbitmq-alias-domain
      type: placeholder

<% if p("rabbitmq.autoscale.enabled") -%>
<% if !p("rabbitmq.route_registrar.enabled") -%>
  - name:    bpm
    release: bpm
<% end -%>
  - name: loggregator_agent
    release: loggregator-agent
    consumes:
      doppler:
        from: doppler
        deployment: (( grab meta.cf.deployment_name ))
    properties:
      loggregator:
        tls:
          ca_cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.ca" ))
          agent:
            cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.crt" ))
            key: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.key" ))
      metrics:
        server_name: (( concat meta.environment "-rabbitmq-metrics-emitter" ))
        ca_cert: (( file "/var/vcap/jobs/blacksmith/config/tls/blacksmith_services_ca" ))
        cert:    ((rabbitmq_metrics_emitter_crt.certificate))
        key:     ((rabbitmq_metrics_emitter_crt.private_key))

  - name: rabbitmq-metrics-emitter
    release: rabbitmq-metrics-emitter
    properties:
      rabbitmq_metrics_emitter:
        cloud_foundry:
          api:    (( grab meta.cf.api_url ))
          skip_ssl_validation: <%= p('rabbitmq_metrics_emitter.cloud_foundry.skip_ssl_validation') %>
          username: <%= p('rabbitmq_metrics_emitter.cloud_foundry.username') %>
          password: <%= p('rabbitmq_metrics_emitter.cloud_foundry.password') %>
        rmq_management:
          skip_ssl_validation: (( grab meta.mgmt_ssl ))
          endpoint: (( concat meta.mgmt_scheme "://" meta.mgmt_host ":" meta.mgmt_port "/api" ))
          user: (( grab meta.username ))
          password: (( grab meta.password ))
        loggregator:
          tls:
            cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.crt" ))
            key: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.key" ))
            ca_cert: (( file "/var/vcap/jobs/rabbitmq-blacksmith-plans/tls/loggregator.ca" ))

    provides:
      rabbitmq-emitter:
        as: rabbitmq-emitter
        ip_addresses: false
    custom_provider_definitions:
    - name: rabbitmq-emitter
      type: address
<% end -%>

<% if p("rabbitmq.route_registrar.enabled") -%>
  - name: route_registrar
    release: routing
    properties:
      nats:
        tls:
          enabled: true
          client_cert: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.certificate))"
          client_key: "((/<%= p("bosh.deployment_name") %>-bosh/<%= p("cf.deployment_name") %>/nats_client_cert.private_key))"
      route_registrar:
        logging_level: "debug"
        routes:
        - name: (( grab name ))
          uris:
          - (( concat name ".<%= p("cf.system_domain") %>" ))
          registration_interval: 10s
<% if p("rabbitmq.route_registrar.tls.enabled") == "true" %>
          tls_port: 15671
          server_cert_domain_san: (( concat name ".<%= p("cf.system_domain") %>" ))
<% else %>
          port: 15672
<% end %>

    consumes:
      nats:
        from: nats
        deployment: <%= p("cf.deployment_name") %>
      nats-tls:
        from: nats-tls
        deployment: <%= p("cf.deployment_name") %>

  - name:    bpm
    release: bpm

addons:
- name: bosh-dns-aliases
  include:
    jobs:
    - name: route_registrar
      release: routing
  jobs:
  - name: bosh-dns-aliases
    release: bosh-dns-aliases
    properties:
      aliases:
      - domain: nats.service.cf.internal
        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: '*'
      - domain: _.nats.service.cf.internal
        targets:
        - deployment: (( grab meta.cf.deployment_name ))
          domain: bosh
          instance_group: nats
          network: (( grab params.cf.core_network ))
          query: _
<% end %>

